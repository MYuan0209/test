#include<iostream>
#include<vector>
#include<stack>
#define POINTS vector<pair<int, int>>
using namespace std;
bool dfs(char** map, bool** visited, stack<int>& path, int start_r, int start_c, int dst_r, int dst_c, int row, int col) {
    if (start_r == dst_r && start_c == dst_c) {
        return true;
    }
    int a = start_r;
    int b = start_c;
    if (map[a][b] == 2) {
        if (a - 1 >= 0 && !visited[a - 1][b]) {
            do {
                visited[a - 1][b] = true;
                --a;
            }while (a - 1 >= 0 && !visited[a - 1][b] && !map[a][b]);
            if (visited[dst_r][dst_c]) {
                return true;
            }
            if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
                return true;
            }
            else {
                while (a < start_r) {
                    visited[a][b] = false;
                    ++a;
                }
                return false;
            }
        }
    }
    else if (map[a][b] == 3) {
        if (a + 1 < row && !visited[a + 1][b]) {
            do {
                visited[a + 1][b] = true;
                ++a;
            }while ((a + 1) < row && !visited[a + 1][b] && !map[a][b]);
            if (visited[dst_r][dst_c]) {
                return true;
            }
            if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
                return true;
            }
            else {
                while (a > start_r) {
                    visited[a][b] = false;
                    --a;
                }
                return false;
            }
        }
    }
    else if (map[a][b] == 4) {
        if (b - 1 >= 0 && !visited[a][b - 1]) {
            do {
                visited[a][b - 1] = true;
                --b;
            }while ((b - 1) >= 0 && !visited[a][b - 1] && !map[a][b]);
            if (visited[dst_r][dst_c]) {
                return true;
            }
            if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
                return true;
            }
            else {
                while (b < start_c) {
                    visited[a][b] = false;
                    ++b;
                }
                return false;
            }
        }
    }
    else if (map[a][b] == 5) {
        if (b + 1 < col && !visited[a][b + 1]) {
            do {
                visited[a][b + 1] = true;
                ++b;
            }while ((b + 1) < col && !visited[a][b + 1] && !map[a][b]);
            if (visited[dst_r][dst_c]) {
                return true;
            }
            if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
                return true;
            }
            else {
                while (b > start_c) {
                    visited[a][b] = false;
                    --b;
                }
                return false;
            }
        }
    }
    if (a - 1 >= 0 && !visited[a - 1][b]) {
        do {
            visited[a - 1][b] = true;
            --a;
        }while (a - 1 >= 0 && !visited[a - 1][b] && !map[a][b]);
        path.push(1);
        if (visited[dst_r][dst_c]) {
            return true;
        }
        if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
            return true;
        }
        else {
            while (a < start_r) {
                visited[a][b] = false;
                ++a;
            }
            path.pop();
        }
    }
    if (a + 1 < row && !visited[a + 1][b]) {
        do {
            visited[a + 1][b] = true;
            ++a;
        }while ((a + 1) < row && !visited[a + 1][b] && !map[a][b]);
        path.push(2);
        if (visited[dst_r][dst_c]) {
            return true;
        }
        if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
            return true;
        }
        else {
            while (a > start_r) {
                visited[a][b] = false;
                --a;
            }
            path.pop();
        }
    }
    if (b - 1 >= 0 && !visited[a][b - 1]) {
        do {
            visited[a][b - 1] = true;
            --b;
        }while ((b - 1) >= 0 && !visited[a][b - 1] && !map[a][b]);
        path.push(3);
        if (visited[dst_r][dst_c]) {
            return true;
        }
        if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
            return true;
        }
        else {
            while (b < start_c) {
                visited[a][b] = false;
                ++b;
            }
            path.pop();
        }
    }
    if (b + 1 < col && !visited[a][b + 1]) {
        do {
            visited[a][b + 1] = true;
            ++b;
        }while ((b + 1) < col && !visited[a][b + 1] && !map[a][b]);
        path.push(4);
        if (visited[dst_r][dst_c]) {
            return true;
        }
        if (dfs(map, visited, path, a, b, dst_r, dst_c, row, col)) {
            return true;
        }
        else {
            while (b > start_c) {
                visited[a][b] = false;
                --b;
            }
            path.pop();
        }
    }
    return false;
}

int main()
{
    int row = 9;
    int col = 8;
    int start_r = 7;
    int start_c = 0;
    int dst_r = 0;
    int dst_c = 7;
    POINTS space = {{0, 6}, {3, 5}, {4, 6}, {5, 7}};
    POINTS carrots = {{1, 6}, {4, 4}};
    POINTS up_arrows = {{5, 1}, {5, 5}};
    POINTS down_arrows = {};
    POINTS left_arrows = {{1, 5}};
    POINTS right_arrows = {{2, 1}};

    char **map = new char*[row];
    bool **visited = new bool*[row];
    for (int i = 0; i < row; ++i) {
        map[i] = new char[col];
        visited[i] = new bool[col];
        for (int j = 0; j < col; ++j) {
            map[i][j] = 0;
            visited[i][j] = false;
        }
    }
    stack<int> path, res;

    for (auto x:space) {
        visited[x.first][x.second] = true;
    }
    for (auto x:carrots) {
        map[x.first][x.second] = 1;
    }
    for (auto x:up_arrows) {
        map[x.first][x.second] = 2;
    }
    for (auto x:down_arrows) {
        map[x.first][x.second] = 3;
    }
    for (auto x:left_arrows) {
        map[x.first][x.second] = 4;
    }
    for (auto x:right_arrows) {
        map[x.first][x.second] = 5;
    }

    visited[start_r][start_c] = true;

    dfs(map, visited, path, start_r, start_c, dst_r, dst_c, row, col);

    while (!path.empty()) {
        res.push(path.top());
        path.pop();
    }
    while (!res.empty()) {
        switch (res.top()) {
            case 1:
                cout << "上" << ' ';
                break;
            case 2:
                cout << "下" << ' ';
                break;
            case 3:
                cout << "左" << ' ';
                break;
            case 4:
                cout << "右" << ' ';
                break;
        }
        res.pop();
    }
    return 0;
}
